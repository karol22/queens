Object subclass: #Queen	instanceVariableNames: 'row column neighbour'	classVariableNames: ''	poolDictionaries: ''	category: 'Queens'!!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 14:01'!findSolution	[ neighbour canAttack: row column:  column]		whileTrue: [ self advance ifFalse: [ ^false ] ].	^true! !!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 14:06'!result	^neighbour result; add: row! !!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 14:05'!canAttack: testRow column: testColumn 	|columnDifference|	columnDifference := testColumn - column.	(((row = testRow) or:		[ row + columnDifference = testRow]) or:		[ row - columnDifference = testRow])			ifTrue: [ ^true ].	^neighbour canAttack: testRow  column: testColumn ! !!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 14:22'!add: anInteger 	Transcript show: anInteger .! !!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 13:09'!setColumn: aNumber neighbor: aQueen	" initialize the data fields "	column := aNumber.	neighbour := aQueen.	row := 1.! !!Queen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 13:20'!advance	"first entry row"	(row < 8)		ifTrue: [ row := row + 1. ^self findSolution ].	(neighbour advance) ifFalse: [ ^false ].	row := 1.	^self findSolution		! !Object subclass: #SentinelQueen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Queens'!!SentinelQueen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 14:21'!add: anInteger Transcript show: anInteger .	! !!SentinelQueen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 12:53'!result	" return empty list as result "	^LinkedList new! !!SentinelQueen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 12:50'!canAttack: row column: column	" sentinels cannot attack "	^false! !!SentinelQueen methodsFor: 'functions' stamp: 'KarolGutierrez 2/12/2019 12:49'!advance	"sentinels do not attack"	^false! !